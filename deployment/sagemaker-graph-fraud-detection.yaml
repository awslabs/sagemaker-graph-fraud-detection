AWSTemplateFormatVersion: "2010-09-09"
Description: "(SA0002) - sagemaker-graph-fraud-detection: Solution for training a graph neural network model for fraud detection using Amazon SageMaker. Version 1"
Parameters:
  SolutionPrefix:
    Type: String
    Default: "sm-soln-graph-fraud-detection"
    Description: |
      Used to name resources created as part of this stack (and inside nested stacks too).
      Can be the same as the stack name used by AWS CloudFormation, but this field has extra
      constraints because it's used to name resources with restrictions (e.g. Amazon S3 bucket
      names cannot contain capital letters).
    AllowedPattern: '^sm-soln-graph-fraud-[a-z0-9\-]{1,20}$'
    ConstraintDescription: |
      Only allowed to use lowercase letters, hyphens and/or numbers.
      Should also start with 'sm-soln-graph-fraud' for permission management.
  S3HistoricalTransactionsPrefix:
    Description: Enter the S3 prefix where historical transactions/relations are stored.
    Type: String
    Default: "raw-data"
  S3ProcessingJobInputPrefix:
    Description: Enter the S3 prefix where inputs should be monitored for changes to start the processing job
    Type: String
    Default: "processing-input"
  S3ProcessingJobOutputPrefix:
    Description: Enter the S3 prefix where preprocessed data should be stored and monitored for changes to start the training job
    Type: String
    Default: "preprocessed-data"
  S3TrainingJobOutputPrefix:
    Description: Enter the S3 prefix where model and output artifacts from the training job should be stored
    Type: String
    Default: "training-output"
  LaunchSageMakerNotebookClassic:
    Description: Whether to launch classic sagemaker notebook instance
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"
  SageMakerProcessingJobContainerName:
    Description: Name of the SageMaker processing job ECR Container
    Type: String
    Default:  "sm-soln-graph-fraud-preprocessing"
  SageMakerProcessingJobInstanceType:
    Description: Instance type of the SageMaker processing job
    Type: String
    Default:  "ml.m4.xlarge"
  SageMakerTrainingJobInstanceType:
    Description: Instance type of the SageMaker processing job
    Type: String
    Default:  "ml.p3.2xlarge"
  SageMakerNotebookInstanceType:
    Description: Instance type of the SageMaker notebook instance
    Type: String
    Default:  "ml.m4.xlarge"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Solution Configuration
        Parameters:
          - SolutionPrefix
      -
        Label:
          default: S3 Configuration
        Parameters:
          - S3HistoricalTransactionsPrefix
          - S3ProcessingJobInputPrefix
          - S3ProcessingJobOutputPrefix
          - S3TrainingJobOutputPrefix
      -
        Label:
          default: SageMaker Configuration
        Parameters:
          - LaunchSageMakerNotebookClassic
          - SageMakerProcessingJobContainerName
          - SageMakerProcessingJobInstanceType
          - SageMakerTrainingJobInstanceType
          - SageMakerNotebookInstanceType
    ParameterLabels:
      SolutionPrefix:
        default: Solution Resources Name Prefix
      S3HistoricalTransactionsPrefix:
        default: S3 Data Prefix
      S3ProcessingJobInputPrefix:
        default: S3 Processing Input Prefix
      S3ProcessingJobOutputPrefix:
        default: S3 Preprocessed Data Prefix
      S3TrainingJobOutputPrefix:
        default: S3 Training Results Prefix
      LaunchSageMakerNotebookClassic:
        default: Launch Classic SageMaker Notebook Instance
      SageMakerProcessingJobContainerName:
        default: SageMaker Processing Container Name
      SageMakerProcessingJobInstanceType:
        default: SageMaker Processing Instance
      SageMakerTrainingJobInstanceType:
        default: SageMaker Training Instance
      SageMakerNotebookInstanceType:
        default: SageMaker Notebook Instance

Mappings:
  S3:
    SolutionRef:
      Bucket: "sagemaker-solutions"
  Lambda:
    DataPreprocessing:
      S3Key: "Fraud-detection-in-financial-networks/build/data_preprocessing.zip"
    GraphModelling:
      S3Key: "Fraud-detection-in-financial-networks/build/graph_modelling.zip"

Conditions:
  CreateClassicSageMakerResources: !Equals [ !Ref LaunchSageMakerNotebookClassic, "Yes" ]

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Event: s3:ObjectCreated:*
            Function: !GetAtt DataPreprocessingLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref S3ProcessingJobInputPrefix
          -
            Event: s3:ObjectCreated:*
            Function: !GetAtt GraphModellingLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref S3ProcessingJobOutputPrefix
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Configuring logging requires supplying an existing customer S3 bucket to store logs
          - id: W51
            reason: Default access policy suffices
  
  SageMakerPermissionsStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
      - "https://s3.amazonaws.com/${SolutionRefBucketBase}-${Region}/Fraud-detection-in-financial-networks/deployment/sagemaker-permissions-stack.yaml"
      - SolutionRefBucketBase: !FindInMap [S3, SolutionRef, Bucket]
        Region: !Ref AWS::Region
      Parameters:
        SolutionPrefix: !Ref SolutionPrefix
        SolutionS3BucketName: !Sub "${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"

  SageMakerStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: CreateClassicSageMakerResources
    Properties:
      TemplateURL: !Sub
      - "https://s3.amazonaws.com/${SolutionRefBucketBase}-${Region}/Fraud-detection-in-financial-networks/deployment/sagemaker-notebook-instance-stack.yaml"
      - SolutionRefBucketBase: !FindInMap [S3, SolutionRef, Bucket]
        Region: !Ref AWS::Region
      Parameters:
        SolutionPrefix: !Ref SolutionPrefix
        SolutionS3BucketName: !Sub "${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"
        S3InputDataPrefix: !Ref S3HistoricalTransactionsPrefix
        S3ProcessingJobOutputPrefix: !Ref S3ProcessingJobOutputPrefix
        S3TrainingJobOutputPrefix: !Ref S3TrainingJobOutputPrefix
        SageMakerNotebookInstanceType: !Ref SageMakerNotebookInstanceType
        SageMakerProcessingJobContainerName: !Ref SageMakerProcessingJobContainerName
        NotebookInstanceExecutionRoleArn: !GetAtt SageMakerPermissionsStack.Outputs.SageMakerRoleArn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${SolutionPrefix}-${AWS::Region}-lambda-role"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${SolutionPrefix}-InvokeSagemaker"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - sagemaker:CreateTrainingJob
              - sagemaker:DescribeTrainingJob
              - sagemaker:CreateProcessingJob
              - sagemaker:DescribeProcessingJob
              Resource:
              - !Sub "arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:*"
        -
          PolicyName: !Sub "${SolutionPrefix}-ReadWriteFromS3"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              Resource:
              - !Sub "arn:aws:s3:::${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"
              - !Sub "arn:aws:s3:::${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}/*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: Needs to be explicitly named to tighten launch permissions policy

  DataPreprocessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.process_event"
      FunctionName: !Sub "${SolutionPrefix}-data-preprocessing"
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          processing_job_ecr_repository: !Ref SageMakerProcessingJobContainerName
          processing_job_input_s3_prefix: !Ref S3ProcessingJobInputPrefix
          processing_job_instance_type: !Ref SageMakerProcessingJobInstanceType
          processing_job_output_s3_prefix: !Ref S3ProcessingJobOutputPrefix
          processing_job_role_arn: !GetAtt SageMakerPermissionsStack.Outputs.SageMakerRoleArn
          processing_job_s3_bucket: !Sub "${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"
          processing_job_s3_raw_data_key: !Ref S3HistoricalTransactionsPrefix
      Runtime: "python3.7"
      Code:
        S3Bucket: !Sub
          - "${SolutionRefBucketBase}-${Region}"
          - SolutionRefBucketBase: !FindInMap [S3, SolutionRef, Bucket]
            Region: !Ref AWS::Region
        S3Key: !FindInMap [Lambda, DataPreprocessing, S3Key]
      Timeout : 60
      MemorySize : 256
  DataPreprocessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref DataPreprocessingLambda
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"
      SourceAccount: !Ref AWS::AccountId
  GraphModellingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.process_event"
      FunctionName: !Sub "${SolutionPrefix}-model-training"
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          training_job_instance_type: !Ref SageMakerTrainingJobInstanceType
          training_job_output_s3_prefix: !Ref S3TrainingJobOutputPrefix
          training_job_role_arn: !GetAtt SageMakerPermissionsStack.Outputs.SageMakerRoleArn
          training_job_s3_bucket: !Sub "${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"
      Runtime: "python3.7"
      Code:
        S3Bucket: !Sub
          - "${SolutionRefBucketBase}-${Region}"
          - SolutionRefBucketBase: !FindInMap [S3, SolutionRef, Bucket]
            Region: !Ref AWS::Region
        S3Key: !FindInMap [Lambda, GraphModelling, S3Key]
      Timeout : 60
      MemorySize : 256
  GraphModellingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref GraphModellingLambda
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

Outputs:
  SourceCode:
    Condition: CreateClassicSageMakerResources
    Description: "Open Jupyter IDE. This authenticate you against Jupyter."
    Value: !GetAtt SageMakerStack.Outputs.SourceCode

  NotebookInstance: 
    Condition: CreateClassicSageMakerResources
    Description: "SageMaker Notebook instance to manually orchestrate data preprocessing and model training"
    Value: !GetAtt SageMakerStack.Outputs.NotebookInstance

  AccountID:
    Description: "AWS Account ID to be passed downstream to the notebook instance"
    Value: !Ref AWS::AccountId

  AWSRegion:
    Description: "AWS Region to be passed downstream to the notebook instance"
    Value: !Ref AWS::Region

  NotebookInstanceExecutionRoleArn:
    Description: "Arn of SageMaker Execution Role"
    Value: !GetAtt SageMakerPermissionsStack.Outputs.SageMakerRoleArn

  SolutionPrefix:
    Description: "Solution Prefix for naming SageMaker transient resources"
    Value: !Ref SolutionPrefix

  SolutionS3Bucket:
    Description: "Solution S3 bucket name"
    Value: !Sub "${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"

  S3InputDataPrefix:
    Description: "S3 bucket prefix for raw data"
    Value: !Ref S3HistoricalTransactionsPrefix

  S3ProcessingJobOutputPrefix:
    Description: "S3 bucket prefix for processed data"
    Value: !Ref S3ProcessingJobOutputPrefix

  S3TrainingJobOutputPrefix:
    Description: "S3 bucket prefix for trained model and other artifacts"
    Value: !Ref S3TrainingJobOutputPrefix

  SageMakerProcessingJobContainerName:
    Description: "ECR Container name for SageMaker processing job"
    Value: !Ref SageMakerProcessingJobContainerName