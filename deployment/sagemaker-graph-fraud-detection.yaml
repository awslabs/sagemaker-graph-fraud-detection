AWSTemplateFormatVersion: "2010-09-09"
Description: "(SA0002) - sagemaker-graph-fraud-detection: Solution for training a graph neural network model for fraud detection using Amazon SageMaker. Version 1"
Parameters:
  SolutionPrefix:
    Type: String
    Default: "sm-soln-graph-fraud-detection"
    Description: |
      Used to name resources created as part of this stack (and inside nested stacks too).
      Can be the same as the stack name used by AWS CloudFormation, but this field has extra
      constraints because it's used to name resources with restrictions (e.g. Amazon S3 bucket
      names cannot contain capital letters).
    AllowedPattern: '^sm-soln-graph-fraud-[a-z0-9\-]{1,20}$'
    ConstraintDescription: |
      Only allowed to use lowercase letters, hyphens and/or numbers.
      Should also start with 'sm-soln-graph-fraud' for permission management.
  IamRole:
    Type: String
    Default: ""
    Description: |
      IAM Role that will be attached to the resources created by this cloudformation to grant them permissions to
      perform their required functions. This role should allow SageMaker and Lambda perform the required actions like
      creating training jobs and processing jobs. If left blank, the template will attempt to create a role for you.
      This can cause a stack creation error if you don't have privileges to create new roles.
  S3HistoricalTransactionsPrefix:
    Description: Enter the S3 prefix where historical transactions/relations are stored.
    Type: String
    Default: "raw-data"
  S3ProcessingJobInputPrefix:
    Description: Enter the S3 prefix where inputs should be monitored for changes to start the processing job
    Type: String
    Default: "processing-input"
  S3ProcessingJobOutputPrefix:
    Description: Enter the S3 prefix where preprocessed data should be stored and monitored for changes to start the training job
    Type: String
    Default: "preprocessed-data"
  S3TrainingJobOutputPrefix:
    Description: Enter the S3 prefix where model and output artifacts from the training job should be stored
    Type: String
    Default: "training-output"
  CreateSageMakerNotebookInstance:
    Description: Whether to launch classic sagemaker notebook instance
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  BuildSageMakerContainersRemotely:
    Description: |
      Whether to launch a CodeBuild project to build sagemaker containers.
      If set to 'true' SageMaker notebook will use the CodeBuild project to launch a build job for sagemaker containers.
      If set to 'false' SageMaker notebook will attempt to build solution containers on the notebook instance.
      This may lead to some unexpected issues as docker isn't installed in SageMaker studio containers.
    Type: String
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
  SageMakerProcessingJobContainerName:
    Description: Name of the SageMaker processing job ECR Container
    Type: String
    Default:  "sm-soln-graph-fraud-preprocessing"
  SageMakerProcessingJobInstanceType:
    Description: Instance type of the SageMaker processing job
    Type: String
    Default:  "ml.m4.xlarge"
  SageMakerTrainingJobInstanceType:
    Description: Instance type of the SageMaker processing job
    Type: String
    Default:  "ml.p3.2xlarge"
  SageMakerNotebookInstanceType:
    Description: Instance type of the SageMaker notebook instance
    Type: String
    Default:  "ml.m4.xlarge"
  StackVersion:
    Description: |
      CloudFormation Stack version.
      Use 'release' version unless you are customizing the
      CloudFormation templates and solution artifacts.
    Type: String
    Default: release
    AllowedValues:
      - release
      - development

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Solution Configuration
        Parameters:
          - SolutionPrefix
          - IamRole
          - StackVersion
      -
        Label:
          default: S3 Configuration
        Parameters:
          - S3HistoricalTransactionsPrefix
          - S3ProcessingJobInputPrefix
          - S3ProcessingJobOutputPrefix
          - S3TrainingJobOutputPrefix
      -
        Label:
          default: SageMaker Configuration
        Parameters:
          - CreateSageMakerNotebookInstance
          - BuildSageMakerContainersRemotely
          - SageMakerProcessingJobContainerName
          - SageMakerProcessingJobInstanceType
          - SageMakerTrainingJobInstanceType
          - SageMakerNotebookInstanceType
    ParameterLabels:
      SolutionPrefix:
        default: Solution Resources Name Prefix
      IamRole:
        default: Solution IAM Role Arn
      StackVersion:
        default: Solution Stack Version
      S3HistoricalTransactionsPrefix:
        default: S3 Data Prefix
      S3ProcessingJobInputPrefix:
        default: S3 Processing Input Prefix
      S3ProcessingJobOutputPrefix:
        default: S3 Preprocessed Data Prefix
      S3TrainingJobOutputPrefix:
        default: S3 Training Results Prefix
      CreateSageMakerNotebookInstance:
        default: Launch Classic SageMaker Notebook Instance
      BuildSageMakerContainersRemotely:
        default: Build SageMaker containers on AWS CodeBuild
      SageMakerProcessingJobContainerName:
        default: SageMaker Processing Container Name
      SageMakerProcessingJobInstanceType:
        default: SageMaker Processing Instance
      SageMakerTrainingJobInstanceType:
        default: SageMaker Training Instance
      SageMakerNotebookInstanceType:
        default: SageMaker Notebook Instance

Mappings:
  S3:
    release:
      BucketPrefix: "sagemaker-solutions"
    development:
      BucketPrefix: "sagemaker-solutions-build"
  Lambda:
    DataPreprocessing:
      S3Key: "Fraud-detection-in-financial-networks/build/data_preprocessing.zip"
    GraphModelling:
      S3Key: "Fraud-detection-in-financial-networks/build/graph_modelling.zip"
  CodeBuild:
    ProcessingContainer:
      S3Key: "Fraud-detection-in-financial-networks/build/sagemaker_data_preprocessing.zip"

Conditions:
  CreateClassicSageMakerResources: !Equals [ !Ref CreateSageMakerNotebookInstance, "true" ]
  CreateCustomSolutionRole: !Equals [!Ref IamRole, ""]
  CreateCodeBuildProject: !Equals [!Ref BuildSageMakerContainersRemotely, "true"]

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          -
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Event: s3:ObjectCreated:*
            Function: !GetAtt DataPreprocessingLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref S3ProcessingJobInputPrefix
          -
            Event: s3:ObjectCreated:*
            Function: !GetAtt GraphModellingLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: !Ref S3ProcessingJobOutputPrefix
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Configuring logging requires supplying an existing customer S3 bucket to store logs
          - id: W51
            reason: Default access policy suffices

  SolutionAssistantStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
        - "https://s3.amazonaws.com/${SolutionRefBucketBase}-${Region}/Fraud-detection-in-financial-networks/deployment/solution-assistant/solution-assistant.yaml"
        - SolutionRefBucketBase: !FindInMap [S3, !Ref StackVersion, BucketPrefix]
          Region: !Ref AWS::Region
      Parameters:
        SolutionPrefix: !Ref SolutionPrefix
        SolutionsRefBucketName: !Sub
          - "${SolutionRefBucketBase}-${AWS::Region}"
          - SolutionRefBucketBase: !FindInMap [S3, !Ref StackVersion, BucketPrefix]
        SolutionS3BucketName: !Sub "${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"
        ECRRepository: !Ref SageMakerProcessingJobContainerName
        RoleArn: !If [CreateCustomSolutionRole, !GetAtt SageMakerPermissionsStack.Outputs.SageMakerRoleArn, !Ref IamRole]
  
  SageMakerPermissionsStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: CreateCustomSolutionRole
    Properties:
      TemplateURL: !Sub
      - "https://s3.amazonaws.com/${SolutionRefBucketBase}-${Region}/Fraud-detection-in-financial-networks/deployment/sagemaker-permissions-stack.yaml"
      - SolutionRefBucketBase: !FindInMap [S3, !Ref StackVersion, BucketPrefix]
        Region: !Ref AWS::Region
      Parameters:
        SolutionPrefix: !Ref SolutionPrefix
        SolutionS3BucketName: !Sub "${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"
        SolutionCodeBuildProject: !Sub "${SolutionPrefix}-processing-job-container-build"

  SageMakerStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: CreateClassicSageMakerResources
    Properties:
      TemplateURL: !Sub
      - "https://s3.amazonaws.com/${SolutionRefBucketBase}-${Region}/Fraud-detection-in-financial-networks/deployment/sagemaker-notebook-instance-stack.yaml"
      - SolutionRefBucketBase: !FindInMap [S3, !Ref StackVersion, BucketPrefix]
        Region: !Ref AWS::Region
      Parameters:
        SolutionPrefix: !Ref SolutionPrefix
        SolutionS3BucketName: !Sub "${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"
        S3InputDataPrefix: !Ref S3HistoricalTransactionsPrefix
        S3ProcessingJobOutputPrefix: !Ref S3ProcessingJobOutputPrefix
        S3TrainingJobOutputPrefix: !Ref S3TrainingJobOutputPrefix
        SageMakerNotebookInstanceType: !Ref SageMakerNotebookInstanceType
        SageMakerProcessingJobContainerName: !Ref SageMakerProcessingJobContainerName
        SageMakerProcessingJobContainerCodeBuild: !If [CreateCodeBuildProject, !Ref ProcessingJobContainerBuild, "local"]
        NotebookInstanceExecutionRoleArn: !If [CreateCustomSolutionRole, !GetAtt SageMakerPermissionsStack.Outputs.SageMakerRoleArn, !Ref IamRole]

  ProcessingJobContainerBuild:
    Condition: CreateCodeBuildProject
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${SolutionPrefix}-processing-job-container-build"
      Description: !Sub "Build docker container for SageMaker Processing job for ${SolutionPrefix}"
      ServiceRole: !If [CreateCustomSolutionRole, !GetAtt SageMakerPermissionsStack.Outputs.SageMakerRoleArn, !Ref IamRole]
      Source:
        Type: S3
        Location: !Sub
         - "${SolutionRefBucketBase}-${AWS::Region}/${SourceKey}"
         - SolutionRefBucketBase: !FindInMap [S3, !Ref StackVersion, BucketPrefix]
           SourceKey: !FindInMap [CodeBuild, ProcessingContainer, S3Key]
      Environment:
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:4.0
        Type: LINUX_CONTAINER
        PrivilegedMode: True
        EnvironmentVariables:
          - Name: ecr_repository
            Value: !Ref SageMakerProcessingJobContainerName
          - Name: region
            Value: !Ref AWS::Region
          - Name: account_id
            Value: !Ref AWS::AccountId
      Artifacts:
        Type: NO_ARTIFACTS
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W32
            reason: overriding encryption requirements for codebuild

  DataPreprocessingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.process_event"
      FunctionName: !Sub "${SolutionPrefix}-data-preprocessing"
      Role: !If [CreateCustomSolutionRole, !GetAtt SageMakerPermissionsStack.Outputs.SageMakerRoleArn, !Ref IamRole]
      Environment:
        Variables:
          processing_job_ecr_repository: !Ref SageMakerProcessingJobContainerName
          processing_job_input_s3_prefix: !Ref S3ProcessingJobInputPrefix
          processing_job_instance_type: !Ref SageMakerProcessingJobInstanceType
          processing_job_output_s3_prefix: !Ref S3ProcessingJobOutputPrefix
          processing_job_role_arn: !If [CreateCustomSolutionRole, !GetAtt SageMakerPermissionsStack.Outputs.SageMakerRoleArn, !Ref IamRole]
          processing_job_s3_bucket: !Sub "${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"
          processing_job_s3_raw_data_key: !Ref S3HistoricalTransactionsPrefix
      Runtime: "python3.7"
      Code:
        S3Bucket: !Sub
          - "${SolutionRefBucketBase}-${Region}"
          - SolutionRefBucketBase: !FindInMap [S3, !Ref StackVersion, BucketPrefix]
            Region: !Ref AWS::Region
        S3Key: !FindInMap [Lambda, DataPreprocessing, S3Key]
      Timeout : 60
      MemorySize : 256
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Passed in role or created role both have cloudwatch write permissions
  DataPreprocessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref DataPreprocessingLambda
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"
      SourceAccount: !Ref AWS::AccountId
  GraphModellingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.process_event"
      FunctionName: !Sub "${SolutionPrefix}-model-training"
      Role: !If [CreateCustomSolutionRole, !GetAtt SageMakerPermissionsStack.Outputs.SageMakerRoleArn, !Ref IamRole]
      Environment:
        Variables:
          training_job_instance_type: !Ref SageMakerTrainingJobInstanceType
          training_job_output_s3_prefix: !Ref S3TrainingJobOutputPrefix
          training_job_role_arn: !If [CreateCustomSolutionRole, !GetAtt SageMakerPermissionsStack.Outputs.SageMakerRoleArn, !Ref IamRole]
          training_job_s3_bucket: !Sub "${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"
      Runtime: "python3.7"
      Code:
        S3Bucket: !Sub
          - "${SolutionRefBucketBase}-${Region}"
          - SolutionRefBucketBase: !FindInMap [S3, !Ref StackVersion, BucketPrefix]
            Region: !Ref AWS::Region
        S3Key: !FindInMap [Lambda, GraphModelling, S3Key]
      Timeout : 60
      MemorySize : 256
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: Passed in role or created role both have cloudwatch write permissions
  GraphModellingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref GraphModellingLambda
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

Outputs:
  SourceCode:
    Condition: CreateClassicSageMakerResources
    Description: "Open Jupyter IDE. This authenticate you against Jupyter."
    Value: !GetAtt SageMakerStack.Outputs.SourceCode

  NotebookInstance: 
    Condition: CreateClassicSageMakerResources
    Description: "SageMaker Notebook instance to manually orchestrate data preprocessing and model training"
    Value: !GetAtt SageMakerStack.Outputs.NotebookInstance

  AccountID:
    Description: "AWS Account ID to be passed downstream to the notebook instance"
    Value: !Ref AWS::AccountId

  AWSRegion:
    Description: "AWS Region to be passed downstream to the notebook instance"
    Value: !Ref AWS::Region

  IamRole:
    Description: "Arn of SageMaker Execution Role"
    Value: !If [CreateCustomSolutionRole, !GetAtt SageMakerPermissionsStack.Outputs.SageMakerRoleArn, !Ref IamRole]

  SolutionPrefix:
    Description: "Solution Prefix for naming SageMaker transient resources"
    Value: !Ref SolutionPrefix

  SolutionS3Bucket:
    Description: "Solution S3 bucket name"
    Value: !Sub "${SolutionPrefix}-${AWS::AccountId}-${AWS::Region}"

  S3InputDataPrefix:
    Description: "S3 bucket prefix for raw data"
    Value: !Ref S3HistoricalTransactionsPrefix

  S3ProcessingJobOutputPrefix:
    Description: "S3 bucket prefix for processed data"
    Value: !Ref S3ProcessingJobOutputPrefix

  S3TrainingJobOutputPrefix:
    Description: "S3 bucket prefix for trained model and other artifacts"
    Value: !Ref S3TrainingJobOutputPrefix

  SageMakerProcessingJobContainerName:
    Description: "ECR Container name for SageMaker processing job"
    Value: !Ref SageMakerProcessingJobContainerName

  SageMakerProcessingJobContainerBuild:
    Description: "Code build project for remotely building the sagemaker preprocessing container"
    Value: !If [CreateCodeBuildProject, !Ref ProcessingJobContainerBuild, "local"]